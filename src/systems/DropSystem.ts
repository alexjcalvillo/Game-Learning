import { System, World } from '../core/ecs';
import { Drop, Position, Size } from '../components';
import { GameEvents } from '../core/enums'

/**
 * Logic specifically tied to Mineable components - @todo extend
 *
 * For each queries component key and entity, check if component hp is 0
 *
 * if so generate a drop with properties of that component drop table and
 * destroy the entity from the world (@todo - factor respawn rate/behaviors)
 */
export class DropSystem implements System {
    private unsubscribe?: () => void

    public init(world: World): void {
        this.unsubscribe = world.onGame(GameEvents.ROCK_DESTROYED, (payload) => {
            console.debug('dropSystem - rock destroyed', payload)
            if (!payload) return

            const { resourceType, position } = payload
            const entity = world.createEntity()

            if (position) {
                world.addComponent(entity, Position, position)
                world.addComponent(entity, Size, { width: 16, height: 16 })
            }

            world.addComponent(entity, Drop, { resourceType, amount: 1 })

            world.emitGame(GameEvents.RESOURCE_COLLECTED, {
                entity,
                resourceType,
                amount: 1,
            })
        })
    }

    public update(_world: World): void {
        // nothing per-frame; drops generated by event handlers
    }

    public destroy(world: World): void {
        if (this.unsubscribe) {
            this.unsubscribe()
        }

        this.unsubscribe = undefined
    }
}
